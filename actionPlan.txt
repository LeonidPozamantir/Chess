1. Build 1-component react and backend with 1 endpoint and deploy it on AWS
    a) Create backend and frontend like in MERN
    b) Make one endpoint in back
    c) In front there should be one NavLink that navigates to Route that shows a container component that makes request to the endpoint and write it to its state
        // in typescript react-route-dom should be installed along with @types/react-route-dom
    d) Make project work in production (see end of MERN video)
    e) Check that production build works on local
    d) Make a project on AWS EC2 // to connect, it has to have internet gateway. Default VPC has it.
    e) Install git and node on AWS EC2 (pay attention: to add key to github it should be converted to OpenSSH: public from the frame, private is exported as id_rsa to .ssh)
    f) Check that the project runs on AWS // shoud be run with SUDO

2. Build authorization page
    a) Make header, navbar and content
    b) Make auth and game tabs in navbar with corresponding pages
    c) Add redux and auth reducer
    —Å1) Fake reducer, store, connect
    d) Build redux form on login page (first wo thunk, async call from the component)
    e) Make fake login backend endpoint
    f) Make sure that data is received on the back side
    g) add express-session, check that count views works https://www.npmjs.com/package/express-session
    h) add passport
            https://habr.com/ru/post/201206/
            https://habr.com/ru/post/435106/
    i) add button to from that gets session content, check that session is filled, then make the button get req.user

3. Make some order in the work done - front
    a) Back to front: make AuthPage typization
    b) Add fields validation
    c) Create complex form components
    d) Show errors in the login form
    e) Move login request to thunk
    f) Show username in the header
    g) Make redirect to game if logged in
    h) Add preloader component
    i) Make endpoint "me" and getAuthUserData thunk
    j) Call getAuthUserData from app
    k) Add HOC withAuthRedirect, wrap GamePage with it and see that logged user is redirected to login page and back
            - good point to check in production
    i) Infer action types using generic types
            https://www.youtube.com/watch?v=RKrkQxFYJ1c
            https://habr.com/ru/company/alfa/blog/452620/
    i) Make app reducer and call app. Initialize from App component instead of getAuthUserData
    j) Show preloader if not logged in

4. Make order in the work done - back
    a) Move passport configuration to a separate file
    b) Work on session parameters
    c) Move secrets to config
    d) Make dbConnector and request it for users
    e) Add production.js to config

5. Login process improvement
    a) Try to set individual parameters for a session (needed for rememberMe)
    b) Implement rememberMe
    c) Implement logout

6. Begin working on the game page
    a) Build the screen styled div structure
    b) Add colored cells that react to click alerting their coord
    c) Try to put a single piece on board
    d) Take that single piece from an array and make it clickable
    d) Put all pieces for the position as a parameter, position hardcoded
    e) Break into components
    f) Improve styling
    g) Build game reducer (without actions for now)
    h) Make order in types

7. Add some dynamics to the board
    a) Trace the move made:
        - make local state for selected cells
        - handle clicks on pieces and empty cells (make alert to show the move)
        - style selected cells
    b) Make action and move the piece
        - good point to check in production

8. Rules compliance
    a) Make common script for back and front:
        https://justinklemm.com/sharing-javascript-backend-node-js-frontend-browser/
        https://stackoverflow.com/questions/34424845/adding-script-tag-to-react-jsx
    b) Make class Position and take all data from there
    c) Add full position data
    d) Move validity check
    e) Update moveMake action for castling, piece capture, en passant, pawn promotion
    f) Make UI and method for choosing promotion piece
    g) Make a test - number of legal moves vs Arena for a real game
        - good point to check in production

9. Additional forms
    a) Registration page
    b) Registration endpoint
    c) Settings page
    d) Settings enpoint
    e) Show success notification

10. Begin working on server game
    a) Add "before game" status and corresponding UI
    b) Open web socket after pressing start game button
        https://www.valentinog.com/blog/socket-react/#socketio-react-and-nodejs-preparing-the-project
        https://stackoverflow.com/questions/13095418/how-to-use-passport-with-express-and-socket-io
    c) We need to make some order here in passport - serialize/deserialize and make user id
    c) Let's begin with server sending random text answers
    d) Build a game manager on server
    e) Now let's server play a random move after random thinking time
        - good point to check in production

11. Make the full game cycle
    a) Make order with sending pawn promotion move
    b) Add game complete status, checkmate and stalemate
    c) Make UI for game completion (for now only checkmate and stalemate)
    d) Add game completion logic to the server

12. Connect the second human player
    a) Check that there are no unreferenced games in the games array in game manager
    b) Make UI for game request:
        - divide game status into 3 divs
        - add request status, preloader and stop button
    c) Add actions to the socket message, start game after start game message was received
    d) Make game request and pairing logic at the server side
    e) Flip board for the black
    f) Make sure that player cannot be paired with himself
        - good point to check in production

TODO:
front:
- show only relevant tabs
- flip board
- add validators for username and password

back:
- encrypt password
- add validators for username, password and email
- make a separate login function (req.logIn ... res.send)
- switch game manager to game id

bugs:
 - after logout-login-start game the board is not reset (that's right but should be implemented in a different way)